import React, { useMemo, useState, useEffect } from "react";

// Single-file React app ‚Äì no external UI libs. Tailwind classes used for styling.
// Default export so it can be previewed.
export default function SymbolReferenceApp() {
  type Category = "Alchemical" | "Astrological" | "Mathematical" | "Rune" | "Occult";

  type SymbolRow = {
    char: string;
    name: string;
    meaning: string;
    category: Category;
    keywords?: string[];
  };

  const SYMBOLS: SymbolRow[] = [
    // Alchemical (Unicode block U+1F700 has many; some fonts may vary)
    { char: "üúÇ", name: "Fire", meaning: "Element of fire; transformation, heat, energy.", category: "Alchemical", keywords: ["element", "triangle up"] },
    { char: "üúÑ", name: "Water", meaning: "Element of water; dissolution, flow, emotion.", category: "Alchemical", keywords: ["element", "triangle down"] },
    { char: "üúÅ", name: "Air", meaning: "Element of air; separation, intellect, breath.", category: "Alchemical" },
    { char: "üúÉ", name: "Earth", meaning: "Element of earth; coagulation, stability, matter.", category: "Alchemical" },
    { char: "üúî", name: "Sal Ammoniac", meaning: "Ammonium chloride; fixation and purification work.", category: "Alchemical" },
    { char: "üúç", name: "Aqua Fortis", meaning: "Nitric acid; powerful corrosive solvent.", category: "Alchemical" },
    { char: "üúõ", name: "Vinegar", meaning: "Acetum; sour solvent used in extractions.", category: "Alchemical" },
    { char: "üúö", name: "Vitriol", meaning: "Vitriol (sulfates); emblem of the Great Work.", category: "Alchemical" },

    // Astrological
    { char: "‚òâ", name: "Sun", meaning: "Core self, vitality, identity.", category: "Astrological" },
    { char: "‚òΩ", name: "Moon", meaning: "Emotion, body, rhythms, reflection.", category: "Astrological" },
    { char: "‚òø", name: "Mercury", meaning: "Communication, trade, analysis.", category: "Astrological" },
    { char: "‚ôÄ", name: "Venus", meaning: "Attraction, aesthetics, values.", category: "Astrological" },
    { char: "‚ôÇ", name: "Mars", meaning: "Drive, assertion, heat.", category: "Astrological" },
    { char: "‚ôÉ", name: "Jupiter", meaning: "Expansion, faith, opportunity.", category: "Astrological" },
    { char: "‚ôÑ", name: "Saturn", meaning: "Structure, limits, time.", category: "Astrological" },
    { char: "‚ôÖ", name: "Uranus", meaning: "Shock, invention, liberation.", category: "Astrological" },
    { char: "‚ôÜ", name: "Neptune", meaning: "Dreams, dissolution, mysticism.", category: "Astrological" },
    { char: "‚ôá", name: "Pluto", meaning: "Underworld, power, rebirth.", category: "Astrological" },
    { char: "‚ôà", name: "Aries", meaning: "Cardinal fire sign; initiative.", category: "Astrological" },
    { char: "‚ôé", name: "Libra", meaning: "Cardinal air sign; balance.", category: "Astrological" },
    { char: "‚òå", name: "Conjunction", meaning: "Planets aligned in the same degree.", category: "Astrological" },
    { char: "‚òç", name: "Opposition", meaning: "Planets 180¬∞ apart.", category: "Astrological" },

    // Mathematical
    { char: "‚àû", name: "Infinity", meaning: "Unbounded quantity; limit behavior.", category: "Mathematical" },
    { char: "‚àë", name: "Summation", meaning: "Sigma notation for sums.", category: "Mathematical" },
    { char: "‚àè", name: "Product", meaning: "Capital pi; product of terms.", category: "Mathematical" },
    { char: "‚àö", name: "Square Root", meaning: "Principal square root.", category: "Mathematical" },
    { char: "‚âà", name: "Approximately Equal", meaning: "Approximate equality.", category: "Mathematical" },
    { char: "‚â†", name: "Not Equal", meaning: "Inequality relation.", category: "Mathematical" },
    { char: "‚â§", name: "Less or Equal", meaning: "Inequality bound.", category: "Mathematical" },
    { char: "‚â•", name: "Greater or Equal", meaning: "Inequality bound.", category: "Mathematical" },
    { char: "‚àÄ", name: "For All", meaning: "Universal quantifier.", category: "Mathematical" },
    { char: "‚àÉ", name: "There Exists", meaning: "Existential quantifier.", category: "Mathematical" },
    { char: "‚àà", name: "Element Of", meaning: "Set membership.", category: "Mathematical" },
    { char: "‚àâ", name: "Not An Element", meaning: "Non-membership.", category: "Mathematical" },

    // Runes (Elder Futhark)
    { char: "·ö†", name: "Fehu", meaning: "Wealth, cattle, mobile resources.", category: "Rune" },
    { char: "·ö¢", name: "Uruz", meaning: "Strength, vitality, raw power.", category: "Rune" },
    { char: "·ö¶", name: "Thurisaz", meaning: "Thorn, giant, catalytic force.", category: "Rune" },
    { char: "·ö®", name: "Ansuz", meaning: "Breath, inspiration, Odin.", category: "Rune" },
    { char: "·ö±", name: "Raidho", meaning: "Journey, motion, rhythm.", category: "Rune" },
    { char: "·öπ", name: "Wunjo", meaning: "Joy, harmony, fellowship.", category: "Rune" },
    { char: "·õâ", name: "Algiz", meaning: "Protection, elk, sanctuary.", category: "Rune" },
    { char: "·õü", name: "Othala", meaning: "Ancestral land, inheritance.", category: "Rune" },

    // Occult / Magickal
    { char: "‚õ§", name: "Pentagram", meaning: "Five-pointed star; protection, elements.", category: "Occult" },
    { char: "‚ú°", name: "Hexagram", meaning: "Six-pointed star; union of opposites.", category: "Occult" },
    { char: "‚ò•", name: "Ankh", meaning: "Egyptian key of life; vitality.", category: "Occult" },
    { char: "‚ò§", name: "Caduceus", meaning: "Hermes‚Äô staff; mediation, exchange.", category: "Occult" },
    { char: "‚ú¥", name: "Star of Lakshmi", meaning: "Eightfold wealth and virtues.", category: "Occult" },
    { char: "üî±", name: "Trident Emblem", meaning: "Power of the sea; sovereignty.", category: "Occult" },
  ];

  const ALL_CATEGORIES: Category[] = ["Alchemical", "Astrological", "Mathematical", "Rune", "Occult"];

  const [query, setQuery] = useState("");
  const [activeCats, setActiveCats] = useState<Category[]>(ALL_CATEGORIES);
  const [copied, setCopied] = useState<string | null>(null);

  useEffect(() => {
    if (!copied) return;
    const t = setTimeout(() => setCopied(null), 1200);
    return () => clearTimeout(t);
  }, [copied]);

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    return SYMBOLS.filter((s) =>
      activeCats.includes(s.category) &&
      (
        q.length === 0 ||
        s.name.toLowerCase().includes(q) ||
        s.meaning.toLowerCase().includes(q) ||
        s.keywords?.some((k) => k.toLowerCase().includes(q))
      )
    );
  }, [query, activeCats]);

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(text);
    } catch (err) {
      // Fallback if clipboard API is not available
      const ok = window.prompt("Copy this symbol and press Enter:", text);
      if (ok !== null) setCopied(text);
    }
  };

  const toggleCategory = (cat: Category) => {
    setActiveCats((prev) =>
      prev.includes(cat) ? prev.filter((c) => c !== cat) : [...prev, cat]
    );
  };

  const selectOnly = (cat: Category) => setActiveCats([cat]);
  const selectAll = () => setActiveCats(ALL_CATEGORIES);
  const clearAll = () => setActiveCats([]);

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900">
      <header className="sticky top-0 z-20 bg-white/80 backdrop-blur border-b border-gray-200">
        <div className="mx-auto max-w-6xl px-4 py-4 flex flex-col gap-3 md:flex-row md:items-end md:justify-between">
          <div>
            <h1 className="text-2xl font-semibold tracking-tight">Symbol Reference</h1>
            <p className="text-sm text-gray-600">Browse, filter, and copy alchemical, astrological, mathematical, rune, and occult symbols.</p>
          </div>
          <div className="flex flex-col md:flex-row gap-3 w-full md:w-auto">
            <div className="relative w-full md:w-80">
              <input
                type="text"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="Search name, meaning, or keyword‚Ä¶"
                className="w-full rounded-xl border border-gray-300 bg-white px-4 py-2 pr-10 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                aria-label="Search symbols"
              />
              <span className="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2">üîé</span>
            </div>
            <div className="flex gap-2 items-center">
              <button onClick={selectAll} className="rounded-xl border px-3 py-2 text-sm shadow-sm hover:bg-gray-100">All</button>
              <button onClick={clearAll} className="rounded-xl border px-3 py-2 text-sm shadow-sm hover:bg-gray-100">None</button>
            </div>
          </div>
          <div className="flex flex-wrap gap-2">
            {ALL_CATEGORIES.map((cat) => {
              const active = activeCats.includes(cat);
              return (
                <button
                  key={cat}
                  onClick={() => toggleCategory(cat)}
                  onDoubleClick={() => selectOnly(cat)}
                  className={`rounded-full px-3 py-1.5 text-sm border shadow-sm ${
                    active ? "bg-indigo-600 text-white border-indigo-600" : "bg-white text-gray-800 border-gray-300 hover:bg-gray-100"
                  }`}
                  aria-pressed={active}
                  title={`Toggle ${cat} (double‚Äëclick: only ${cat})`}
                >
                  {cat}
                </button>
              );
            })}
          </div>
        </div>
      </header>

      <main className="mx-auto max-w-6xl px-4 py-6">
        <div className="mb-3 text-sm text-gray-600">Showing <span className="font-medium">{filtered.length}</span> of {SYMBOLS.length} symbols</div>

        <div className="overflow-hidden rounded-2xl border border-gray-200 bg-white shadow-sm">
          <table className="w-full table-fixed">
            <thead className="bg-gray-50 text-left text-sm text-gray-600">
              <tr>
                <th className="w-24 px-4 py-3">Copy</th>
                <th className="w-28 px-4 py-3">Symbol</th>
                <th className="px-4 py-3">Name & Explanation</th>
                <th className="w-40 px-4 py-3">Category</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-100">
              {filtered.map((s, idx) => (
                <tr key={`${s.char}-${idx}`} className="hover:bg-gray-50/80">
                  <td className="px-4 py-2">
                    <button
                      onClick={() => copyToClipboard(s.char)}
                      className="rounded-lg border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm hover:bg-gray-100 active:scale-[.98]"
                      aria-label={`Copy ${s.name} symbol`}
                    >
                      Copy
                    </button>
                  </td>
                  <td className="px-4 py-2 text-3xl select-all" style={{fontFamily: "system-ui, ui-sans-serif, 'Segoe UI Symbol', 'Noto Sans Symbols', 'Apple Color Emoji', 'Segoe UI Emoji'"}}>
                    {s.char}
                  </td>
                  <td className="px-4 py-2">
                    <div className="font-medium">{s.name}</div>
                    <div className="text-sm text-gray-600">{s.meaning}</div>
                  </td>
                  <td className="px-4 py-2">
                    <span className="inline-flex items-center rounded-full border border-gray-300 px-2.5 py-0.5 text-xs">{s.category}</span>
                  </td>
                </tr>
              ))}

              {filtered.length === 0 && (
                <tr>
                  <td colSpan={4} className="px-4 py-10 text-center text-sm text-gray-500">No symbols match your filters. Try widening your selection or clearing the search.</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </main>

      {/* Tiny toast */}
      <div
        className={`pointer-events-none fixed inset-x-0 bottom-6 flex justify-center transition-opacity ${copied ? "opacity-100" : "opacity-0"}`}
        aria-live="polite"
      >
        <div className="rounded-full bg-gray-900 text-white text-sm px-4 py-2 shadow-lg">
          {copied ? `Copied: ${copied}` : ""}
        </div>
      </div>

      <footer className="mx-auto max-w-6xl px-4 py-8 text-xs text-gray-500">
        <p>
          Tips: Click <span className="font-medium">Copy</span> to copy a symbol. Use the category chips to filter; double‚Äëclick a chip to select only that category. Search checks names, explanations, and keywords.
        </p>
      </footer>
    </div>
  );
}
